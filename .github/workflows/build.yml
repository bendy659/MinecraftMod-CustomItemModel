name: Build and Release
on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      # 1. Checkout
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Setup Gradle
      - uses: gradle/actions/setup-gradle@v3

      # 3. Setup Java
      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'microsoft'
          cache: 'gradle'

      # 4. Make gradlew executable
      - name: Make gradle wrapper executable
        run: chmod +x ./gradlew

      # 5. Get mod version from gradle.properties
      - name: Get mod version
        id: get_version
        run: |
          MOD_VERSION=$(grep "^mod.version=" gradle.properties | cut -d'=' -f2)
          echo "MOD_VERSION=$MOD_VERSION" >> $GITHUB_ENV

      # 6. Build all versions
      - name: Build all versions
        run: ./gradlew shadowJar --stacktrace --info

      # 7. Upload build artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CIM-builds
          path: versions/*/build/libs/*.jar

      # 8. Create release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}-release
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.MC_MOD_CUSTOMITEMMODEL_ACTION }}

      # 9. Upload jars to release
      - name: Upload Release Assets
        run: |
          for jar in versions/*/build/libs/*.jar; do
            BASENAME=$(basename "$jar")
            # urlencode filename
            ENCODED_NAME=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$BASENAME'))")
            echo "Uploading $BASENAME..."
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.MC_MOD_CUSTOMITEMMODEL_ACTION }}" \
              -H "Content-Type: application/java-archive" \
              --data-binary @"$jar" \
              "${{ steps.create_release.outputs.upload_url }}?name=$ENCODED_NAME"
          done
